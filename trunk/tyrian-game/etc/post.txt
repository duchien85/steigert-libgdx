#8 - libgdx Tutorial: Sound and Music

The last change before start implementing the Level screen is to add sound and music to the menu.

Important changes
 * I updated the libgdx JARs and SO files to the <a href="http://libgdx.badlogicgames.com/nightlies/">latest available</a>.
 * The <b>TyrianPreferences</b> is now called <b>PreferencesManager</b> and lives inside the services package.
 * In the <b>Tyrian</b> class (our game class) the services are created inside <b>#create()</b>.
 * In the <b>AbstractScreen</b> class I removed the disposal of the stage, since it was crashing the game in some 64-bit machines.
   I'm trying to understand this problem in depth, so I hope I can come up with a good solution in the future.
 * The <b>ProfileService</b> was renamed to <b>ProfileManager</b>, and now it uses a new file type: <b>local</b> (instead of <b>external</b>).
   In Android it will resolve to a folder private to the application in the local file system, and not the SD Card. This is good for two
   reasons: (1) when the application is removed, so are these files; (2) the SD Card is not always available. In the Desktop it will
   resolve to the game's root folder.

Sound and Music
The <a href="http://code.google.com/p/libgdx/source/browse/trunk/gdx/src/com/badlogic/gdx/Audio.java">com.badlogic.gdx.Audio</a> interface
allows us to easily handle sound and music in libgdx, and you can get a valid instance just by calling: <b>Gdx.audio</b>. When working with
audio it's important to know that:
 * All sound and music should be disposed when they're no longer needed.
 * Sound instances are fully loaded to the heap before being played and can have up to 1 MB.
 * You create sound instances through: <b>Gdx.audio.newSound(FileHandle)</b>
 * Music instances are streamed and are paused/resumed automaticaly when the game is paused/resumed.
 * You create music instances through: <b>Gdx.audio.newMusic(FileHandle)</b>
 * The supported formats for both sound and music are: WAV, MP3 and OGG.

The Sound and Music services
When dealing with audio the hard work lies on creating nice services to work with. Given the directives above it would be nice to:
 * Create separated sound and music services.
 * The music service should allow just one music to be played at any given time.
 * The sound service should cache the loaded sounds in order to improve performance.
 * Both services should manage the loaded resources, disposing them correctly.
 * Both services may be turned on/off at any time, and they should respect the volume setting.
